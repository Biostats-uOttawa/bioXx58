{
  "hash": "4ad721f8c2e389eeafa9b16997ff8b92",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to Generalized linear mixed models?\"\nsubtitle: Harnessing non linearity random effects\nauthor: Julien Martin\ninstitute:  BIO 8940 - Lecture 8\ndate: today\nfrom: markdown+emoji\nformat:\n  revealjs: \n    width: 1600\n    height: 950\n    chalkboard: true\n    theme: [default]\n    css: [assets/theme_chalk/whiteboard-blue.css]\n#    output-location: column-fragment\n#    logo: assets/MAD_logo_small_rb.png\n    footer: BIO 8940 - Lecture 8\n    show-notes: false\n    output-ext: slides.html\n  html:\n    self-contained: true\n    number-sections: true\n    format-links: false\n    css: assets/css/notes.css\n    number-depth: 2\n    comments:\n      hypothesis: true\n    output-ext: notes.html\n    code-link: true\neditor:\n  render-on-save: true\n---\n\n\n\n\n## Questions after reading *Bolker et al 2009*\n\n\n\n\n\n\n\n\n\n::: {.incremental}\n- Difference between fixed and random effects\n\n- When to transform data?\n    - if you have a funky looking distribution of continuous data, is it always ok to transform to achieve normality if you donâ€™t violate any test assumptions?\n\n- Walkthrough Figure 1 ?\n\n- Get rid of non-significant fixed effects?\n    - If important for my hypothesis, should I always keep them?\n    - What if I have a fairly small dataset?\n\n- How to choose a link function? Why not using the default?\n\n- Can we go through example in Box 1?\n:::\n\n# GLMM: What are they?\n\n## GaCha Life Minie Movie\n\nVideo game allowing you to dress-up *anime* style characters\n\n::: {.content-visible when-format=\"revealjs\"}\n. . .\n:::\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](assets/img_l8/glmm-anime.png){fig-align='center'}\n:::\n:::\n\n\n\n\n## Generalized linear mixed model\n\nAn extension to **Generalized linear model** and an extension to **linear mixed model**\n\nGLMM expresses the transformed conditional expectation of the dependent variable y as a linear combination of the regression variables X\n\nModel has 3 components\n\n- a structural component or additive expression $\\beta_0 + \\beta_1 X_1 + ... + \\beta_k X_k$\n- a link function: $g(\\mu)$\n- a response distribution: **Gaussian**, **Binomial**, **Bernouilli**, **Poisson**, **negative binomial**, **zero-inflated ...**, **zero-truncated ...**, ...\n\n<!-- $$\ng(\\mu_i) = \\sum_{j=0}^p \\beta_j X_{ij}\n$$ -->\n\n$$\ng(\\mu_i) = \\beta_0 + \\beta_1 X_1 + ... + \\beta_k X_k\n$$\n\nand\n\n$$\n\\mu_i = E(y_i | x_i) = g(\\mu_i)^{-1}\n$$\n\n\n## How do you fit them?\n\nIn R:\n\n- `glmer()` from `lme4` ðŸ“¦ same as `lmer()` but with a `family` argument\n- `glmmPQL()` from `MASS` ðŸ“¦ (based on `lme()`)\n- `glmmADMB()` from - `glmmADMB` ðŸ“¦ works well and flexible be beware\n- `glmmTMB()` from `glmmTMB` ðŸ“¦ works well and flexible be beware\n- `asreml()` from `glmmTMB` ðŸ“¦ great but not-free\n- `MCMCglmm()` from `MCMCglmm` ðŸ“¦ great but Bayesian\n- Choose you bayesian flavor ðŸ“¦:\n    - `stan`: `brms`, `rethinking`, `rstan`, ...\n    - `BUGS`: `runjags`, `rjags`, ...\n\n::: {.content-visible when-format=\"revealjs\"}\n. . .\n:::\n\n\n## Model assumptions\n\n- Easy answer none or really few\n\n- More advanced answer I am not sure, it is complicated\n\n- Just check residuals I as usual\n\n::: {.content-visible when-format=\"revealjs\"}\n. . .\n:::\n\n\n- Technically only 3 assumption:\n    - **Variance is a function of the mean specific to the distribution used**\n    - observations are independent\n    - linear relation on the latent scale\n\n::: {.callout-warning .large}\nGeneralized Linear Models do not care if the residual errors are normally distributed as long as the specified mean-variance relationship is satisfied by the data\n:::\n\n\n## Choosing a link function\n\nA link function should map the stuctural component from $(-\\infty,\\infty)$ to the distribution interval (*e.g.* (0,1) for binomial)\n\nSo number of link function possible is extremley large.\n\n::: {.content-visible when-format=\"revealjs\"}\n. . .\n:::\n\n\n[Choice of **link** function heavily influenced by field tradiditon]{.emph}\n\n::: {.content-visible when-format=\"revealjs\"}\n. . .\n:::\n\nFor binomial models\n\n- **logit** assume modelling probability of an observation to be one\n- **probit** assume binary outcome from a hidden gaussian variable (*i.e.* threshold model)\n- **logit** & **probit** are really similar, both are symmetric but **probit** tapers faster. **logit** coefficient easier to interpret directly\n- **cologlog** not-symmetrical\n\n\n\n## Estimating repeatability ?\n\n[Latent scale]{.emph}\n\nBusiness as usual ?\n\n::: {.content-visible when-format=\"revealjs\"}\n. . .\n:::\n\n[Observed scale ??????]{.emph}\n\n- Using `rptR` ðŸ“¦ is the easiest or `QGGlmm` ðŸ“¦ (see associated citation for reference and explanations)\n\n\n## Marginalized vs Conditioned estimates\n\n\nDifference between **marginalized** and **conditioned** coefficients?\n\n**GLMMadaptive** ðŸ“¦ is the only way I know to do easily get marginalized coefficients\n\n\n## Practical\n\n[Walkthrough Example box 1]{style=\"text-align: center;\"}\n\n# Happy modelling {.unnumbered}\n\n![](assets/img_l5/unicorn.png){fig-align=\"center\"}\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}